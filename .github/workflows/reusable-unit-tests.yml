on:
  workflow_call:
    inputs:
      python_versions:
        required: false
        default: '[3.9]'
        type: string
      coverage:
        required: false
        type: boolean
    secrets:
      CODECOV_TOKEN:
        description: 'Codecov token for coverage (required if coverage is true)'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ${{ fromJson(inputs.python_versions }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1.3
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        env:
          cache-name: venv-cache
        with:
          path: .venv
          key: venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
            venv-${{ matrix.python-version }}-
      - name: Install dependencies
        run: |
          poetry install -v
      - name: Pre-commit checks
        run: |
          poetry run pre-commit run --all-files
      - name: Test with pytest
        if: ${{ inputs.coverage }}
        run: |
          poetry run py.test --cov-report=xml:.coverage.xml
      - name: Test with pytest
        if: ${{ !inputs.coverage }}
        run: |
          poetry run py.test
      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v2
        if: ${{ inputs.coverage }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./.coverage.xml
          fail_ci_if_error: true
          verbose: true
